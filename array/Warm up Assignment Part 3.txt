1. Happy Number

https://leetcode.com/problems/happy-number/discuss/56917/My-solution-in-C(-O(1)-space-and-no-magic-math-property-involved-)  use Floyd Cycle detection algorithm.

int digitSquareSum(int n) {
    int sum = 0, tmp;
    while (n) {
        tmp = n % 10;
        sum += tmp * tmp;
        n /= 10;
    }
    return sum;
}

bool isHappy(int n) {
    int slow, fast;
    slow = fast = n;
    do {
        slow = digitSquareSum(slow);
        fast = digitSquareSum(fast);
        fast = digitSquareSum(fast);
    } while(slow != fast);
    if (slow == 1) return 1;
    else return 0;
}

public boolean isHappy(int n) {
        
           HashSet<Integer> set= new HashSet<>();
            while(true)
            {
                    int sum=0;
                    while(n>0)
                    {
                      int rem=n%10;
                      sum+= rem*rem;
                      n=n/10;
                    }
                 if(sum==1)
                   return true;
              if(set.contains(sum))
                      break;
              set.add(sum);
                n=sum;
            }
          return false;
    }
	
	
2. Power of Two

class Solution {
    public boolean isPowerOfTwo(int n) { 
            if(n<=0)
                return false;
    if(n==1)
        return true;
     n=Math.abs(n);
            int count=0;
     for(int i=0;i<32;i++)
     {
          // int k=Math.abs(nums[j]);
          //  p+=(k&(1<<i))!=0 ?1 :0;
          if((n&(1<<i))!=0)
                  count++;
     }
            if(count>1)
                    return false;
            return true;
}
}



3. Valid Anagram
 public boolean isAnagram(String s, String t) {
        if(s.length()!=t.length())
                return false;
        HashMap<Character,Integer> map= new HashMap<>();
        for(int i=0;i<s.length();i++)
        {
           if(map.containsKey(s.charAt(i)))
           {
             int count= map.get(s.charAt(i));
             map.put(s.charAt(i),count+1);
           }
           else
             map.put(s.charAt(i),1);
        }
        for(int i=0;i<t.length();i++)
        {
           if(map.containsKey(t.charAt(i)))
           {
             int c= map.get(t.charAt(i));
             if(c-1==0)
                map.remove(t.charAt(i));
             else
             map.put(t.charAt(i),c-1);
           }
           else
             return false;
        }
          if(map.isEmpty()==true)
                  return true;
          else
                 return false;
    }


4. Ugly Number	
class Solution {
    public boolean isUgly(int n) {
        if(n==0)
         return false;
       while(n%2==0)
       {
               n=n/2;
       }
       while(n%3==0)
       {
             n=n/3;
       }
       while(n%5==0)
       {
             n=n/5;
       }
       if(n==1)
           return true;
        else
           return false;
  }
}


	
5. Move Zeroes
	
	 public void moveZeroes(int[] nums) {
        
            int i=0;
            int j=0;
            for(i=0;i<nums.length;i++)
            {
                    if(nums[i]!=0)
                    {
                        nums[j]=nums[i];
                            if(i!=j)
                            nums[i]=0;
                            j++;
                    }
            }
            
    }
	
6. Reverse Vowels of a String

public String reverseVowels(String s) {
        
            StringBuilder str= new StringBuilder(s);
            int lower=0;
            int higher=s.length()-1;
            while(lower<higher)
            {
                if(!isVowels(str.charAt(lower))) 
                {
                        lower++;
                }
                else if(!isVowels(str.charAt(higher)))
                        higher--;
                else
                {
                   char ch= str.charAt(lower);
                   str.setCharAt(lower,str.charAt(higher));
                   str.setCharAt(higher,ch);
                        lower++;
                        higher--;
                }
            }
            return str.toString();
    }
        public static boolean isVowels(char ch)
        {
if(ch=='a' || ch == 'A' || ch == 'e' || ch== 'E' || ch == 'i' || ch == 'I' || ch == 'o' || ch == 'O' || ch == 'u' || ch == 'U')
        return true;
                return false;
        }


7. Third Maximum Number

public int thirdMax(int[] nums) {
        long first=Long.MIN_VALUE;
        long second = Long.MIN_VALUE;
        long third = Long.MIN_VALUE;
        
        for(int i=0;i<nums.length;i++)
        {
                if(nums[i] > first)
                {
                        third=second;
                        second=first;
                        first= nums[i];
                }
                else if(nums[i]< first && nums[i] > second)
                {
                        third= second;
                        second= nums[i];
                }
                else if(nums[i] < second && nums[i] > third)
                {
                        third= nums[i];
                }
                else
                {
                        
                }
        }
            
            if(third != Long.MIN_VALUE)
                    return (int) third;
            else
                    return (int) first;
        
    }


9. Find the Difference

  public char findTheDifference(String s, String t) {
       
        int store[]= new int[26];
        for(int i=0;i<s.length();i++)
        {
           int index= s.charAt(i)-'a';
           store[index]=store[index]+1;
        }
        for(int i=0;i<t.length();i++)
        {
            int index= t.charAt(i)-'a';
            if(store[index]==0)
                 return t.charAt(i);
            store[index]--;
        }
          return 'a';
    }
    
    
10. Add Digits    
  class Solution {
    public int addDigits(int num) {
         if(num==0)
          return 0;
        if(num%9==0)
                return 9;
         int rem=num%9;
          return rem;
                
    }
}  
    

9. Sum of Digits of String After Convert

class Solution {
    public int getLucky(String s, int k) {
            if(k<1)
            return -1;
         int res=0;
            for(int j=0;j<s.length();j++)
               {
                 int temp=(s.charAt(j)-'a' +1);
                 if(temp>=10)
                 {
                   res+=temp%10;
                   temp=temp/10;
                   res+=temp%10;
                 }
                 else
                 {
                   res+=temp;
                 }
               }
             // System.out.println(res);
          int num= res;
       
        // System.out.println(num);
        for(int i=0;i<k-1;i++)
        {
               int temp=0;
               while(num>0)
               {
                    temp+=num%10;
                    num=num/10;
               }
               num=temp;
           
        }
            return num;
    }
}  
    
    
    
    
