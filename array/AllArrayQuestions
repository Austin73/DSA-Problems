Trapping Rain Water 

   // Function to find the trapped water between the blocks.
    static long trappingWater(int arr[], int n) { 
        // Your code here
        long res=0;
        int left[]= new int[n];
        int right[]= new int[n];
        int max1=Integer.MIN_VALUE;
        int max2=Integer.MIN_VALUE;
        for(int i=0;i<n;i++)
        {
            max1=Math.max(arr[i],max1);
            left[i]=max1;   
        }
        for(int i=n-1;i>=0;i--)
        {
            max2=Math.max(max2,arr[i]);
            right[i]=max2;
        }
     
    for(int i=0;i<n;i++)
    {
        res+=Math.min(left[i],right[i])-arr[i];
    }
    return res;
    } 
    
Solution 2nd   https://www.youtube.com/watch?v=m18Hntz4go8
     intution- We just need leftMax and RightMax for each element of the array to calculate the wated capped since, we will be moving the left and right pointer based on whether min(arr[left],arr[right] ,i.e. we are trying to fill the water from lesser value ,and maitaining the max of the other side, 
   int leftMax=0;
    int rightMax=0;
     int left=0;
     int res=0;
     int right=height.length-1;
     while(left<=right)
     {
        if(height[left]<=height[right])
        {
           if(height[left]>=leftMax)
           {
               leftMax=height[left];
           }
           else
           {
             res+=leftMax-height[left];
           }
        left++;
        }
        else
        {
          if(height[right]>=rightMax)
          {
               rightMax=height[right];   
          }
          else
          {
                res+=rightMax-height[right];   
          }
                  right--;
        }
     }
         return res;
    }  
    
 
 
 2.  Sort an array of 0s, 1s and 2s
 
 class Solution
{
    public static void sort012(int a[], int n)
    {
        // code here 
       int low=0;
       int high=n-1;
       int mid=0;
       while(mid<=high)
       {
           if(a[mid]==0)
           {
               swap(a,mid,low);
               mid++;
               low++;
           }
           else if(a[mid]==2)
           {
               swap(a,mid,high);
               high--;
           }
           else
               mid++;
       }
    }
    public static void swap(int a[],int mid,int low)
    {
        int temp=a[mid];
        a[mid]=a[low];
        a[low]=temp;
    }
}



3.  Longest Consecutive Sequence

class Solution {
    public int longestConsecutive(int[] nums) {
       if(nums.length==0)
            return 0;
            HashSet<Integer> set= new HashSet<>();
            for(int a:nums)
            {
                    set.add(a);
            }
      int res=0;
       
       for(int i=0;i<nums.length;i++)
       {
               if(!set.contains(nums[i]-1))
               {
                  int temp=nums[i];
                  int j=1;
                  while(set.contains(temp+1))
                  {
                          j++;
                          temp++;
                  }
                res=Math.max(res,j);
               }
       }
            
            return res;
    }
}



4.  K-th element of two sorted Arrays

class Solution {
    public long kthElement( int arr1[], int arr2[], int n, int m, int k) {
       int count=0;
       int i=0;
       int j=0;
       while(i<n&&j<m)
       {
         if(arr1[i]<arr2[j])
         {
             count++;
             if(count==k)
             return arr1[i];
             i++;
         }
         else
         {
             count++;
             if(count==k)
             return arr2[j];
             j++;
         }
             
       }
       
       // if arr2 is completely traversed
    while(i<n)
    {
         count++;
             if(count==k)
             return arr1[i];
             i++;
    }
    // if arr1 is completely traversed
     while(j<m)
    {
         count++;
             if(count==k)
             return arr2[j];
             j++;
    }
    return -1;
        
    }
    
    
 2nd solution using binary search
   if(n>m)
     {
         return kthElement(arr2,arr1,m,n,k);
     }
     
      int low=Math.max(0,k-m); // min element that can be taken from first array
      
      int high=Math.min(k,n);//max element that can be taken from second array
      while(low<=high)
      {
          int cut1=(low+high)/2;
          int cut2=k-cut1;
          int l1=cut1==0?Integer.MIN_VALUE : arr1[cut1-1];
          int l2=cut2==0 ? Integer.MIN_VALUE : arr2[cut2-1];
          int r1=cut1==n ?Integer.MAX_VALUE : arr1[cut1];
          int r2= cut2== m ? Integer.MAX_VALUE : arr2[cut2];
          if(l1<=r2&&l2<=r1)
          {
              return Math.max(l1,l2);
          }
          else if(l1>r2)
            high=cut1-1;
         else
            low=cut1+1;
      }
      return 1;
 
 
 
 
 
5. Container With Most Water
I've seen some "proofs" for the common O(n) solution, but I found them very confusing and lacking. Some even didn't explain anything but just used lots of variables and equations and were like "Tada! See?". I think mine makes more sense:

Idea / Proof:

The widest container (using first and last line) is a good candidate, because of its width. Its water level is the height of the smaller one of first and last line.
All other containers are less wide and thus would need a higher water level in order to hold more water.
The smaller one of first and last line doesn't support a higher water level and can thus be safely removed from further consideration.
  

class Solution {
    public int maxArea(int[] height) {
       int res=0;
      int i=0;
      int j=height.length-1;
      while(i<j)
      {
          res=Math.max(res,(j-i)*Math.min(height[i],height[j]));
          if(height[i]<height[j])
                  i++;
          else
                  j--;
      }
       return res;
    }
}


6. Maximize Number of 1's 

mport java.io.*;
import java.util.*;



class Solve {
    // m is maximum of number zeroes allowed to flip
    int findZeroes(int arr[], int n, int m) {
        // code here
    if(n==1)
      {
          if(arr[0]==1)
          return 1;
         else 
         {
             if(arr[0]==0&&m>0)
               return 1;
             else
               return 0;
         }
           
      }
    Queue<Integer> q= new LinkedList<>();
    int res=0;
    int count=0;
    for(int i=0;i<n;i++)
    {
       if(arr[i]==1)
       {
           count++;
       }
       else
       {
           if(m>0)
           {
               count++;
               m--;
           }
           else
           {
              if(q.isEmpty()==true)
                break;
            int temp=q.poll();
            count=i-temp;
           }
           q.add(i);
       }
       
       res=Math.max(res,count);
    }
      res=Math.max(res,count);
    return res;
    }
}




7.  Balance Array
Given an integer array A of size N. You need to count the number of special elements in the given array.

A element is special if removal of that element make the array balanced.

Array will be balanced if sum of even index element equal to sum of odd index element.

Idea is that
Maintain PrefixSum and SuffixSum for odd and even index seperately.
Let consider the following variable:
leftOdd[i] : Denote the prefixSum of element on odd index till i-1.
leftEven[i] : Denote the prefixSum of element on even index till i-1.
rightOdd[i] : Denote the SuffixSum of element of odd index till i+1.
rightEven[i] : Denote the SuffixSum of element of even index till i+1.

Now, check if the ith element is the special or not.

If leftOdd[i] + rightEven[i] == leftEven[i] + rightOdd[i], then ith element is special, so we increase the count.

when you are deleting i element. indices after i even index will become odd and odd index will become even.


public int solve(ArrayList<Integer> A) {
        int leftOdd[]= new int[A.size()];
        int leftEven[]= new int[A.size()];
        int rightOdd[]= new int[A.size()];
        int rightEven[]= new int[A.size()];
        int n=A.size();
        int sum=0;
        for(int i=0;i<n;i++)
        {
           leftOdd[i]=sum;
            if((i+1)%2!=0)
            {
               sum+=A.get(i);
            }
        }
        sum=0;
        for(int i=0;i<n;i++)
        {
           leftEven[i]=sum;
            if((i+1)%2==0)
            {
               sum+=A.get(i);
            }
        }
        sum=0;
         for(int i=n-1;i>=0;i--)
        {
           rightOdd[i]=sum;
            if((i+1)%2!=0)
            {
               sum+=A.get(i);
            }
        }
        sum=0;
         for(int i=n-1;i>=0;i--)
        {
           rightEven[i]=sum;
            if((i+1)%2==0)
            {
               sum+=A.get(i);
            }
        }
     int count=0;
        for(int i=0;i<n;i++)
        {
          if(leftEven[i]+rightOdd[i] == leftOdd[i]+rightEven[i])
               count++;
        }
        return count;
    }
}


8 .  Subarray with given XOR


A = [4, 2, 2, 6, 4]
 B = 6
 
 the idea is to store prefix xor sum in the hashmap along with its occurence, 
 
 public int solve(ArrayList<Integer> A, int B) {
        int res=0;

        HashMap<Integer,Integer> map= new HashMap<>();
        int current=0;
        for(int i=0;i<A.size();i++)
        {
             current=current^A.get(i);
            int y=current^B;   ////   
            if(map.containsKey(y))
            {
                res+=map.get(y);
            }
          
          if(current==B)
             res++;
        if(map.containsKey(current))
        {
            map.put(current,map.get(current)+1);
        }
        else
           map.put(current,1);
        }
        return res;
    }
    
    
    
 9. Smallest subarray with sum greater than x
 
 idea is to use 2pointer approach keep adding the sum until sum <= x 
 if sum > x // then we found a answer and keep removing initial elelmnt until sum again becomes <= x
 
public static int smallestSubWithSum(int a[], int n, int x) {
        // Your code goes here 
        
       int i=0;
       int j=0;
       int sum=0;
       int res=1000;
       while(i<n&&j<n)
       {
           if(a[i]>x || a[j]>x)
             return 1;
         if(sum+a[j]<=x)
         {
             sum+=a[j];
             j++;
         }
         else
         {
             res=Math.min(res,j-i+1);
          
             sum-=a[i];
                i++;
         }
       }
       return res;
    } 	
    
    
10- Subarrays with given sum 
 HashMap<Integer,Integer> map= new HashMap<>();
        int res=0;
        int currSum=0;
        for(int i=0;i<n;i++)
        {
            currSum+=arr[i];
            if(map.containsKey(currSum-sum))
            {
                res+=map.get(currSum-sum);
            }
            
            if(currSum==sum)
               res++;
          if(map.containsKey(currSum))
          {
              map.put(currSum,map.get(currSum)+1);
          }
          else
               map.put(currSum,1);
        }
        return res;
