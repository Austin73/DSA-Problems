Contains Duplicate II

Given an integer array nums and an integer k, return true if there are two distinct indices i and j in the array such that nums[i] == nums[j] and abs(i - j) <= k

 HashMap<Integer,Integer> map= new HashMap<>();
            for(int i=0;i<nums.length;i++)
            {
                if(map.containsKey(nums[i]))
                {
                   int pos=map.get(nums[i]);
                   if(i-pos <=k)
                        return true;
                   
                }
               map.put(nums[i],i); 
            }
            return false;
    }
   
   2. Contains Duplicate II
 * Using HashSet to maintain the sliding window.
 *
 * Time Complexity: O(N)
 *
 * Space Complexity: O(min(N, K+1))
 *
 * N = Length of input array. K = Input window size.
 */
class Solution1 {
    public boolean containsNearbyDuplicate(int[] nums, int k) {
        if (nums == null || k < 0) {
            throw new IllegalArgumentException("Input array is null");
        }
        if (nums.length <= 1 || k == 0) {
            return false;
        }

        HashSet<Integer> window = new HashSet<>();
        for (int i = 0; i < nums.length; i++) {
            if (i > k) {
                window.remove(nums[i - k - 1]);
            }
            if (!window.add(nums[i])) {
                return true;
            }
        }

        return false;
    }
    
    
 3. Range Sum Query - Immutable
 
 class NumArray {
    int sums[];
    public NumArray(int[] nums) {
     
        for(int i=1;i<nums.length;i++)
        {
          nums[i]+=nums[i-1];      
        }
      this.sums=nums;
    }
    
    public int sumRange(int left, int right) {
        if(left ==0)
                return sums[right];
         return sums[right]-sums[left-1];
    }
}



4.  Range Sum Query 2D - Immutable

The idea is to keep prefix sum of all rows

  int [][] sums;
    public NumMatrix(int[][] matrix) {
        for(int i=0;i<matrix.length;i++)
        {
           for(int j=1;j<matrix[0].length;j++)
           {
              matrix[i][j]+=matrix[i][j-1];
           }
        }
            this.sums=matrix;
    }
    
    public int sumRegion(int row1, int col1, int row2, int col2) {
       
        int res=0;
        for(int i=row1;i<=row2;i++)
        {
           if(col1==0)
           res+=sums[i][col2];
           else
           res+=(sums[i][col2]-sums[i][col1-1]);
        }
      return res;
    }
    
5.  Remove Element

class Solution {
    public int removeElement(int[] nums, int val) {
        if(nums.length ==0)
                return 0;
            int count=0;
      int i=nums.length-1;
       int j=nums.length-1;
       while(i>=0)
       {
          if(nums[i]==val)
          {
             int temp=nums[j];
              nums[j]=nums[i];
              nums[i]=temp;
              j--;
          }
            i--;
       }
      return j+1;
    }
}
6. Intersection of Two Arrays

The idea is to use hashmap to store elements and boolean flag whether this is already stored in result list  or not,boolean flag is to make sure that duplicate element in result list are avoided.


class Solution {
    public int[] intersection(int[] nums1, int[] nums2) {
       
     HashMap<Integer,Boolean> map= new HashMap<>(); 
     for(int a: nums1)
             map.put(a,false);
    List<Integer> res=new ArrayList<>();
     for(int a : nums2)
     {
         if(map.containsKey(a)&&map.get(a)==false)
         {
           res.add(a);
           map.put(a,true);
         }
     }
            
      int[] arr = new int[res.size()];
        int i=0;
        for(int n : res)
                arr[i++]=n;
        
            return arr;
    }
}

7. Intersection of Two Arrays II
THe idea is to store ocurrence of all elements from first array into a map
traverse second array and reduce occurence of elements and add in result list


class Solution {
    public int[] intersect(int[] nums1, int[] nums2) {
      if(nums1.length > nums2.length)
      {
              return intersect(nums2,nums1);
      }
       HashMap<Integer,Integer> map1= new HashMap<>();
       for(int a : nums1)
       {
              if(map1.containsKey(a))
              {
                 map1.put(a,map1.get(a)+1);
              }
              else
                 map1.put(a,1);
       }
   List<Integer> res=new ArrayList<>();
        for(int a : nums2)
       {
              if(map1.containsKey(a))
              {
                 res.add(a);
                 if(map1.get(a)-1 ==0)
                    map1.remove(a);
                 else
                 map1.put(a,map1.get(a)-1);
                 
              }
       }
      
        int[] arr = new int[res.size()];
        int i=0;
        for(int n : res)
                arr[i++]=n;
        
            return arr;
    }
}

8.   Next Greater Element I

the idea is to use monotonic stack 
class Solution {
    public int[] nextGreaterElement(int[] nums1, int[] nums2) {
      int l1=nums1.length;
      int l2=nums2.length;
      Stack<Integer> stack= new Stack<>();
      stack.push(nums2[l2-1]);
   
    HashMap<Integer,Integer> map= new HashMap<>(l2);
      map.put(nums2[l2-1],-1);
      int nextG[]=new int[l1];
      int i=l2-2;
      while(i>=0)
      {
        while(stack.isEmpty()==false&&stack.peek()<nums2[i])
        {
            stack.pop();
        }
        if(stack.isEmpty())
           map.put(nums2[i],-1);     
        else
        {
           map.put(nums2[i],stack.peek());
        }
     stack.push(nums2[i]);
              i--;
      }
  for(i=0;i<l1;i++)
  {
          nextG[i]=map.get(nums1[i]);
  }
            return nextG;
    }
}
