1. Detect cycle in a directed graph

the idea is to store indegree of all vertex and add all 0 indegree vertex into the queue ,means 0 indegree vertex is not dependent on any other vertex, 

then process the current vertex ,and reduce the indegree of all adjacent vertex by one ,if the indegree of vertex becomes zero add into the queue, 
at the last if all vertex all visited then return true else return false
 public boolean isCyclic(int V, ArrayList<ArrayList<Integer>> adj) {
        // code here
       
       int indegree[]= new int[V];
       for(int i=0;i<V;i++)
       {
           for(int v : adj.get(i))
           {
               indegree[v]++;
           }
       }
       Queue<Integer> q= new LinkedList<>();
       for(int i=0;i<V;i++)
       {
           if(indegree[i]==0)
              {
                  q.add(i);
              }
       }
       int count=0;
       while(q.isEmpty()==false)
       {
           int temp=q.poll();
           for(int v : adj.get(temp))
           {
               indegree[v]--;
               if(indegree[v]==0)
                 q.add(v);
           }
               
           count++;
           
       }
       return count!=V;
       
       
       
2.  Prerequisite Tasks


The idea is to use topological sorting ,if there is some topological sorting of given graph
if graph contains cycle then there will be no topoligacl soritng and all task can't complete
    public boolean isPossible(int N, int[][] p)
    {
        // Your Code goes here
     
       
      HashMap<Integer,ArrayList<Integer>> map= new HashMap<>();
      int indegree[]= new int[N];
      for(int i=0;i<p.length;i++)
      {
          if(map.containsKey(p[i][0]))
          {
              map.get(p[i][0]).add(p[i][1]);
          }
          else
          {
              ArrayList<Integer> temp= new ArrayList<>();
              temp.add(p[i][1]);
              map.put(p[i][0],temp);
          }
         indegree[p[i][1]]++;
      }
    Queue<Integer> q= new LinkedList<>();  
    for(int i=0;i<N;i++)
    {
        if(indegree[i]==0)
        {
            q.add(i);
        }
    }
    
    int count=0;
    while(q.isEmpty()==false)
    {
        int polled=q.poll();
     if(map.containsKey(polled))
     {
        for(int v : map.get(polled))
        {
            indegree[v]--;
            if(indegree[v]==0)
             q.add(v);
        }
     }
        count++;
    }
    // System.out.println("Count"+count);
    // System.out.println("map size"+map.size());
    if(count == N)
      return true;
    else 
    return false;
    }  
}


3. Unit Area of largest region of 1's 


class Solution
{
    //Function to find unit area of the largest region of 1s.
    static int count;
    public int findMaxArea(int[][] grid)
    {
        // Code here
        
      int res=Integer.MIN_VALUE;
      for(int i=0;i<grid.length;i++)
      {
          for(int j=0;j<grid[0].length;j++)
          {
          if(grid[i][j]==1){
           count=0;
           dfs(grid,i,j);
            // System.out.println(count);
           res=Math.max(res,count);
          }
          }
      }
      return res;
    }
    
    public static void dfs(int[][] grid,int i,int j)
    {
       if(i<0 || j<0 || i>=grid.length|| j>=grid[0].length || grid[i][j]==0)
       return ;
       count++;
       
    //   System.out.println(count);
       grid[i][j]=0;
       dfs(grid,i+1,j);
       dfs(grid,i,j+1);
      dfs(grid,i-1,j);
      dfs(grid,i,j-1);
      dfs(grid,i+1,j+1);
      dfs(grid,i+1,j-1);
      dfs(grid,i-1,j-1);
      dfs(grid,i-1,j+1);
    
    }
}


4. Bipartite Graph  

the idea is to use BFS approach keep coloring and if found same color on two adjacent vertex return false
else return true

class Solution
{
    public boolean isBipartite(int V, ArrayList<ArrayList<Integer>>adj)
    {
        // Code here
        char color[]= new char[V];
        boolean visited[]= new boolean[V];
        Queue<Integer> q= new LinkedList<>();
        
   for(int i=0;i<V;i++){
       if(visited[i]==false){
        q.add(i);
        color[i]='R';   
        while(q.isEmpty()==false)
        {
            int temp=q.poll();
            visited[temp]=true;
            for(int v : adj.get(temp))
            {
               if(color[v]==color[temp])
                   return false;
               if(visited[v]==false)
                  q.add(v);
             
                 char c=color[temp]=='R'?'B':'R';
                 color[v]=c; 
              
            }
        }
       }
   }
        
        
        return true;
    }
}
  
  
5.  Implementing Dijkstra Algorithm 

  // Write your code here
        boolean vis[] = new boolean[V];
        int dist[] = new int[V];
        Arrays.fill(dist, Integer.MAX_VALUE);
        dist[S] = 0;
        PriorityQueue<Pair> pq = new PriorityQueue<>(new Comparator<Pair>() {
            public int compare(Pair p1, Pair p2) {
                return p1.minVal - p2.minVal;
            }
        });
        pq.add(new Pair(S, 0));
        while (pq.size() != 0) {
            Pair p = pq.poll();
            int idx = p.idx;
            int minVal = p.minVal;
            if (dist[idx] < minVal) {
                continue;
            }
            for (ArrayList<Integer> edge : adj.get(idx)) {
                if (vis[edge.get(0)]) {
                    continue;
                }
                int newDist = dist[idx] + edge.get(1);
                if (newDist < dist[edge.get(0)]) {
                    dist[edge.get(0)] = newDist;
                    pq.add(new Pair(edge.get(0), newDist));
                }
            }
        }

        return dist;
        
        
6. . Minimum Spanning Tree using Kruskal

   
   
   the idea is to use disjoint set datastructure to determine whether adding any edge will form a loop 
   
   1. sort all edges based on weight ,can be used priority queue
   2. for each edge add to the result if it is not forming loop
   
   
   
   
        class DSU
{
    //Function to find the minimum spanning tree value using Kruskal.
    static long kruskalDSU(ArrayList<Edge> adj, int n, int m)
    {
        // add your code here
      PriorityQueue<Edge> pq= new PriorityQueue<>((n1,n2)->n1.wt-n2.wt);
      int parent[]=new int[n+1];
      int rank[]= new int[n+1];
      for(int i=0;i<=n;i++)
      {
          parent[i]=i;
          rank[i]=0;
      }
      for(int i=0;i<m;i++)
      {
          pq.add(adj.get(i));
      }
      long res=0;
      for(int i=0,s=0;s<n-1&&!pq.isEmpty();i++)
      {
          Edge temp=pq.poll();
          int x=find(parent,temp.src);
          int y=find(parent,temp.des);
          if(x!=y)
          {
              res=res+temp.wt;
              s++;
              union(parent,rank,x,y);
          }
          
      }
      return res;
    }
    public static int find(int parent[],int x)
    {
        if(x==parent[x])
            return x;
            
       parent[x]=find(parent,parent[x]);
       return parent[x];
    }
    public static void union(int parent[],int rank[],int x,int y)
    {
        int x_rep= parent[x];
        int y_rep= parent[y];
        if(x_rep==y_rep)
           return;
        if(rank[x_rep]<rank[y_rep])
        {
            parent[x_rep]=y_rep;
        }
        else if(rank[x_rep]> rank[y_rep])
        {
            parent[y_rep]=x_rep;
        }
        else
        {
            parent[y_rep]=x_rep;
            rank[x_rep]++;
        }
        
    }
}
        
        
 7. Prism Algorithm to find Minimum spanning tree
 
 the idea is to use three arr
 1. key that will store the weight of edge
 2. parent -- store the parent of each vertex
 3. MST[]- whether any vertex is in MST or not
 class Node 
{
    private int v;
    private int weight;
    
    Node(int _v, int _w) { v = _v; weight = _w; }
    
    Node() {}
    
    int getV() { return v; }
    int getWeight() { return weight; }
}

class Main
{
    void primsAlgo(ArrayList<ArrayList<Node>> adj, int N)
    {
        int key[] = new int[N];
        int parent[] = new int[N]; 
        boolean mstSet[] = new boolean[N]; 
        for(int i = 0;i<N;i++) {
        	key[i] = 100000000; 
        	mstSet[i] = false; 
        }

        key[0] = 0;
        parent[0] = -1; 
        

        for(int i = 0;i<N-1;i++) {
        	int mini = 100000000, u = 0; 
        	for(int v = 0;v<N;v++) {
        		if(mstSet[v] == false && key[v] < mini) {
        			mini = key[v]; 
        			u = v; 
        		}
        	}

        	mstSet[u] = true;
     

        	for(Node it: adj.get(u)) {
        		if(mstSet[it.getV()] == false && it.getWeight() < key[it.getV()]) {
        			parent[it.getV()] = u; 
        			key[it.getV()] = it.getWeight(); 
        		}
        	}
        }

        for(int i = 1;i<N;i++) {
        	System.out.println(parent[i] + " - " + i); 
        }
    }
    
    
    Using Efficient approach
    
class Node implements Comparator<Node>
{
    private int v;
    private int weight;
    
    Node(int _v, int _w) { v = _v; weight = _w; }
    
    Node() {}
    
    int getV() { return v; }
    int getWeight() { return weight; }

    @Override
    public int compare(Node node1, Node node2) 
    { 
        if (node1.weight < node2.weight) 
            return -1; 
        if (node1.weight > node2.weight) 
            return 1; 
        return 0; 
    } 
}

class Main
{
    void primsAlgo(ArrayList<ArrayList<Node>> adj, int N)
    {
        int key[] = new int[N];
        int parent[] = new int[N]; 
        boolean mstSet[] = new boolean[N]; 
        for(int i = 0;i<N;i++) {
        	key[i] = 100000000; 
        	mstSet[i] = false; 
        }

        PriorityQueue<Node> pq = new PriorityQueue<Node>(N, new Node());

        key[0] = 0;
        parent[0] = -1; 
        pq.add(new Node(key[0], 0)); 
		// Run the loop till all the nodes have been visited
	    // because in the brute code we checked for mstSet[node] == false while computing the minimum
	    // but here we simply take the minimal from the priority queue, so a lot of times a node might be taken twice
	    // hence its better to keep running till all the nodes have been taken. 
	    // try the following case: 
	    // Credits: Srejan Bera
	    // 6 7 
	    // 0 1 5 
	    // 0 2 10 
	    // 0 3 100 
	    // 1 3 50 
	    // 1 4 200
	    // 3 4 250
	    // 4 5 50 
        while(!pq.isEmpty()) {
        	int u = pq.poll().getV();
        	mstSet[u] = true;
        
        	for(Node it: adj.get(u)) {
        		if(mstSet[it.getV()] == false && it.getWeight() < key[it.getV()]) {
        			parent[it.getV()] = u; 
        			key[it.getV()] = it.getWeight(); 
        			pq.add(new Node(it.getV(), key[it.getV()]));
        		}
        	}
        }

        for(int i = 1;i<N;i++) {
        	System.out.println(parent[i] + " - " + i); 
        }
    }
    
    
    
    My implementation
class Node{
    int v;
    int wt;
    public Node(int v,int wt)
    {
        this.v=v;
        this.wt=wt;
    }
}
class Solution
{
    //Function to find sum of weights of edges of the Minimum Spanning Tree.
    static int spanningTree(int V, ArrayList<ArrayList<ArrayList<Integer>>> adj) 
    {
        // Add your code here
        PriorityQueue<Node> pq= new PriorityQueue<>((n1,n2)->n1.wt-n2.wt);
        
        int parent[]= new int[V];
        boolean MST[]=new boolean[V];
        int key[]=new int[V];
        Arrays.fill(key,Integer.MAX_VALUE);
        key[0]=0;
        pq.add(new Node(0,key[0]));
        parent[0]=-1;
        int res=0;
        while(pq.isEmpty()==false)
        {
            Node temp=pq.poll();
            if(MST[temp.v]==true)
              continue;
            MST[temp.v]=true;
            res+=temp.wt;
            for(int i=0;i<adj.get(temp.v).size();i++)
            {
                int u=adj.get(temp.v).get(i).get(0);
                int weight=adj.get(temp.v).get(i).get(1);
                if(!MST[u]&&key[u]>weight)
                {
                    key[u]=weight;
                    parent[u]=temp.v;
                    pq.add(new Node(u,weight));
                }
            }
        }
        
return res;
    }
}
